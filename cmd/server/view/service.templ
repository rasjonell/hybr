package view

import (
	"fmt"
	"hybr/cmd/server/view/components"
	"hybr/internal/services"
	"time"
)

var registry = services.GetRegistry()

func getClass(tab, activeTab int) string {
	defaultClass := "cursor-pointer px-4 py-2 rounded-md transition duration-200 bg-gray-200 text-gray-700 hover:bg-gray-300"
	if tab == activeTab {
		return "cursor-pointer px-4 py-2 rounded-md transition duration-200 bg-blue-600 text-white"
	}
	return defaultClass
}

var tabs = [...]string{"Service Info", "Components", "Variables", "Logs"}

func CurrentTabContent(serviceName string, activeTab int, isEdit bool) templ.Component {
	installation, exists := registry.GetInstallation(serviceName)
	if !exists {
		return components.Info("Unknown Service", []string{}, []string{})
	}

	switch activeTab {
	case 0:
		return components.Info(
			tabs[activeTab],
			[]string{"Name", "Status", "Global URL", "Local URL", "Install Date", "Last Start Date"},
			[]string{installation.GetName(), installation.GetStatus(), installation.GetURL(), "localhost:" + installation.GetPort(),
				installation.GetInstallDate().Format(time.RFC850), installation.GetLastStartTime().Format(time.RFC850),
			},
		)

	case 1:
		return components.DockerComponents(installation.GetComponents())

	case 2:
		if isEdit {
			return components.VariablesEdit(serviceName, installation.GetVariables())
		} else {
			return components.Variables(serviceName, installation.GetVariables())
		}

	case 3:
		return components.Logs(serviceName)
	}

	return components.Info("Unknown tab", []string{}, []string{})
}

templ Service(serviceName string, activeTab int, isEdit bool) {
	<h1 class="text-3xl font-bold mb-8 text-gray-800">{ serviceName }</h1>
	<div class="mb-6 flex space-x-2">
		for tab, title := range tabs {
			<a
				href={ templ.URL(fmt.Sprintf("/services/%s?tab=%d", serviceName, tab)) }
				class={ getClass(tab, activeTab) }
			>
				{ title }
			</a>
		}
	</div>
	@CurrentTabContent(serviceName, activeTab, isEdit)
}
