package view

import (
	"fmt"
	"hybr/cmd/server/view/components"
	"hybr/internal/services"
	"time"
)

var registry = services.GetRegistry()

func getClass(tab, activeTab int) string {
	defaultClass := "bg-gray-900 p-4 border-2 border-green-400 col-span-full w-1/3 text-center"
	if tab == activeTab {
		return "bg-green-400 p-4 border-2 border-gray-900 col-span-full w-1/3 text-center text-gray-900"
	}
	return defaultClass
}

var tabs = [...]string{"Info", "Components", "Logs"}

func CurrentTabContent(serviceName string, activeTab int) templ.Component {
	installation, exists := registry.GetInstallation(serviceName)
	if !exists {
		return components.Info("Unknown Service", []string{})
	}

	switch activeTab {
	case 0:
		return components.Info(tabs[activeTab], []string{
			"Name: " + installation.Name,
			"Status: " + installation.Status,
			"Global URL: " + installation.URL,
			"Local URL: localhost:" + installation.Port,
			"Install Date: " + installation.InstallDate.Format(time.RFC850),
			"Last Start Date: " + installation.LastStartTime.Format(time.RFC850),
		})

	case 1:
		comps := []string{}
		for _, comp := range installation.Components {
			comps = append(comps, fmt.Sprintf("%s:%s - %s", comp.Name, comp.Version, comp.Status))
		}

		return components.Info(tabs[activeTab], comps)

	case 2:
		return components.Info(tabs[activeTab], []string{"log 1", "log 2"})
	}

	return components.Info("Unknown tab", []string{})
}

templ Service(serviceName string, activeTab int) {
	<div class="flex-1 p-8">
		<h2 class="text-4xl mb-6">&gt; { serviceName }</h2>
		<div class="flex w-full mb-3 cursor-pointer">
			for tab, title := range tabs {
				<a class={ getClass(tab, activeTab) } href={ templ.URL(fmt.Sprintf("/services/%s?tab=%d", serviceName, tab)) }>
					<h3 class="text-2xl">{ title }</h3>
				</a>
			}
		</div>
		@CurrentTabContent(serviceName, activeTab)
	</div>
}
