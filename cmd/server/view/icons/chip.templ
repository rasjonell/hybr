package icons

func getSwap(swaps []string) string {
	if len(swaps) > 0 && swaps[0] != "" {
		return swaps[0]
	}

	return ""
}

templ Chip(text string, success bool, swaps ...string) {
	<span class="flex flex-row w-fit items-center px-2 py-1 rounded-lg capitalize">
		<span class="relative flex size-3 mr-2 group">
			<span
				class="absolute inline-flex h-full w-full animate-ping rounded-full opacity-75 bg-green-400"
			></span>
			<span class="relative inline-flex size-3 rounded-full bg-green-500"></span>
			<span class="absolute bottom-full left-1/2 mb-2 w-max max-w-xs -translate-x-1/2 rounded-md bg-gray-700 px-3 py-2 text-center text-sm text-white invisible group-hover:visible">
				This value is automatically
				<br/>
				updated in real-time
				<span class="absolute top-full left-1/2 -mt-0.5 -translate-x-1/2 border-4 border-transparent border-t-gray-700"></span>
			</span>
		</span>
		<span
			sse-swap={ getSwap(swaps) }
		>
			{ text }
		</span>
	</span>
	<script>
    const defaultContainerClass = "flex flex-row w-fit items-center px-2 py-1 rounded-lg capitalize"
    const successContainerClass = `${defaultContainerClass} bg-green-200 text-green-800`;
    const errorContainerClass = `${defaultContainerClass} bg-red-200 text-red-800`;

    const defaultChipOuterClass = "absolute inline-flex h-full w-full animate-ping rounded-full opacity-75";
    const successChipOuterClass = `${defaultChipOuterClass} bg-green-400`;
    const errorChipOuterClass = `${defaultChipOuterClass} bg-red-400`;


    const defaultChipInnerClass = "relative inline-flex size-3 rounded-full";
    const successChipInnerClass = `${defaultChipInnerClass} bg-green-500`;
    const errorChipInnerClass = `${defaultChipInnerClass} bg-red-500`;

    function updateStyles(e) {
      if (e.detail.elt.innerText.toLowerCase() === "running") {
        e.detail.elt.parentElement.className = successContainerClass;
        e.detail.elt.previousElementSibling.childNodes[0].className = successChipOuterClass;
        e.detail.elt.previousElementSibling.childNodes[2].className = successChipInnerClass;
      } else {
        e.detail.elt.parentElement.className = errorContainerClass;
        e.detail.elt.previousElementSibling.childNodes[0].className = errorChipOuterClass;
        e.detail.elt.previousElementSibling.childNodes[2].className = errorChipInnerClass;
      }
    }

    document.body.addEventListener('htmx:sseMessage', updateStyles);
    document.body.addEventListener('htmx:sseClose', function() {
      document.body.removeEventListener('htmx:sseBeforeMessage', updateStyles);
    });
  </script>
}
